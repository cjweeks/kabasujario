{"version":3,"sources":["camera.js"],"names":[],"mappings":"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","file":"camera-compiled.js","sourcesContent":["\r\n\r\n/*********************************** Rectangle ***********************************/\r\n\r\nclass Rectangle {\r\n    constructor(left, top, width, height) {\r\n        this.left = left || 0;\r\n        this.top = top || 0;\r\n        this.width = width || 0;\r\n        this.height = height || 0;\r\n        this.right = this.left + this.width;\r\n        this.bottom = this.top + this.height;\r\n    }\r\n    set(left, top, /*optional*/width, /*optional*/height) {\r\n        width = width || this.width;\r\n        height = height || this.height;\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height ;\r\n        this.right = this.left + this.width;\r\n        this.bottom = this.top + this.height;\r\n    }\r\n    within(r) {\r\n        return (\r\n            r.left <= this.left &&\r\n            r.right >= this.right &&\r\n            r.top <= this.top &&\r\n            r.bottom >= this.bottom\r\n        );\r\n    }\r\n\r\n    overlaps(r) {\r\n        return (\r\n            this.left < r.right &&\r\n            r.left < this.right &&\r\n            this.top < r.bottom &&\r\n            r.top < this.bottom\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*********************************** Camera ***********************************/\r\n\r\n// possibles axis to move the camera\r\nconst AXIS = {\r\n    NONE: \"none\",\r\n    HORIZONTAL: \"horizontal\",\r\n    VERTICAL: \"vertical\",\r\n    BOTH: \"both\"\r\n};\r\n\r\n\r\nclass Camera {\r\n    constructor(xView, yView, canvasWidth, canvasHeight, worldWidth, worldHeight) {\r\n        // position of camera (left-top coordinate)\r\n        this.xView = xView || 0;\r\n        this.yView = yView || 0;\r\n\r\n        // distance from target object to border before camera starts move\r\n        this.xDeadZone = 0; // min distance to horizontal borders\r\n        this.yDeadZone = 0; // min distance to vertical borders\r\n\r\n        // viewport dimensions\r\n        this.wView = canvasWidth;\r\n        this.hView = canvasHeight;\r\n\r\n        // allow camera to move in vertical and horizontal axis\r\n        this.axis = AXIS.BOTH;\r\n\r\n        // object that should be followed\r\n        this.target = null;\r\n\r\n        // rectangle that represents the viewport\r\n        this.viewportRect = new Rectangle(this.xView, this.yView, this.wView, this.hView);\r\n\r\n        // rectangle that represents the world's boundary (room's boundary)\r\n        this.worldRect = new Rectangle(0, 0, worldWidth, worldHeight);\r\n\r\n    }\r\n    /**\r\n     * Updates the parameters of the camera to respond to changes in the window size.\r\n     * @param canvasWidth the new canvas width.\r\n     * @param canvasHeight the new canvas height.\r\n     * @param xDeadZone The new x dead zone (defaults to canvasWidth / 2).\r\n     * @param yDeadZone The new y dead zone (defaults to canvasHeight / 2).\r\n     */\r\n    updateConfiguration(canvasWidth, canvasHeight, xDeadZone, yDeadZone) {\r\n        xDeadZone = xDeadZone || canvasWidth / 2;\r\n        yDeadZone = yDeadZone || canvasHeight / 2;\r\n        this.wView = canvasWidth;\r\n        this.hView = canvasHeight;\r\n        this.xDeadZone = xDeadZone;\r\n        this.yDeadZone = yDeadZone;\r\n        this.viewportRect = new Rectangle(this.xView, this.yView, this.wView, this.hView);\r\n    }\r\n\r\n    /**\r\n     * Configures the camera to follow the given game object.\r\n     * @param gameObject The game object to follow.\r\n     * @param xDeadZone The maximum x distance from the target\r\n     * to the border before the camera begins moving.\r\n     * @param yDeadZone The maximum y distance from the target\r\n     * to the border before the camera begins moving.\r\n     */\r\n    setTarget(gameObject, xDeadZone, yDeadZone) {\r\n        this.target = gameObject;\r\n        this.xDeadZone = xDeadZone;\r\n        this.yDeadZone = yDeadZone;\r\n    }\r\n\r\n    /**\r\n     * Updates the camera position.\r\n     */\r\n    update() {\r\n        // keep following the target\r\n        if (this.target != null) {\r\n            if(this.axis == AXIS.HORIZONTAL || this.axis == AXIS.BOTH) {\r\n                // moves camera on horizontal axis based on followed object position\r\n                if (this.target.position.x - this.xView  + this.xDeadZone > this.wView) {\r\n                    this.xView = this.target.position.x - (this.wView - this.xDeadZone);\r\n                } else if (this.target.position.x  - this.xDeadZone < this.xView) {\r\n                    this.xView = this.target.position.x - this.xDeadZone;\r\n                }\r\n            }\r\n            if (this.axis == AXIS.VERTICAL || this.axis == AXIS.BOTH) {\r\n                // moves camera on vertical axis based on target object's position\r\n                if (this.target.position.y - this.yView + this.yDeadZone > this.hView) {\r\n                    this.yView = this.target.position.y - (this.hView - this.yDeadZone);\r\n                } else if (this.target.position.y - this.yDeadZone < this.yView) {\r\n                    this.yView = this.target.position.y - this.yDeadZone;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // update viewportRect\r\n        this.viewportRect.set(this.xView, this.yView);\r\n\r\n        // don't let camera leaves the world's boundary\r\n        if (!this.viewportRect.within(this.worldRect)) {\r\n            if (this.viewportRect.left < this.worldRect.left) {\r\n                this.xView = this.worldRect.left;\r\n            }\r\n            if( this.viewportRect.top < this.worldRect.top) {\r\n                this.yView = this.worldRect.top;\r\n            }\r\n            if(this.viewportRect.right > this.worldRect.right) {\r\n                this.xView = this.worldRect.right - this.wView;\r\n            }\r\n            if(this.viewportRect.bottom > this.worldRect.bottom) {\r\n                this.yView = this.worldRect.bottom - this.hView;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}