{"version":3,"sources":["client.js"],"names":[],"mappings":";;AAEA;;;;;;;;;AASA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,KAAlC,EAAyC;AACrC,QAAM,oBAAoB,OAAO,qBAAP,EAA1B;AACA,WAAO,OAAO,SAAP,CACH,CAAC,MAAM,OAAN,GAAgB,kBAAkB,IAAnC,KAA4C,kBAAkB,KAAlB,GAA0B,kBAAkB,IAAxF,IAAgG,OAAO,KADpG,EAEH,CAAC,MAAM,OAAN,GAAgB,kBAAkB,GAAnC,KAA2C,kBAAkB,MAAlB,GAA2B,kBAAkB,GAAxF,IAA+F,OAAO,MAFnG,CAAP;AAIH;;AAED;AACA,IAAM,kBAAkB,EAAxB;;AAEA,OAAO,MAAP,GAAgB,YAAY;AACxB;AACA,QAAI,SAAS,SAAS,cAAT,CAAwB,QAAxB,CAAb;;AAEA;AACA,WAAO,KAAP,GAAe,OAAO,UAAtB;AACA,WAAO,MAAP,GAAgB,OAAO,WAAvB;AACA,YAAQ,GAAR,CAAY,SAAS,IAAT,CAAc,YAA1B;;AAEA;AACA,QAAI,SAAS,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,OAAO,KAAxB,EAA+B,OAAO,MAAtC,EAA8C,MAAM,KAApD,EAA2D,MAAM,MAAjE,CAAb;;AAEA;AACA,QAAI,YAAY,IAAI,eAAJ,CAAoB,MAApB,CAAhB;;AAEA;AACA,cAAU,MAAV,GAAmB,MAAnB;;AAEA;AACA,cAAU,OAAV,GAAoB,UAAU,MAAV,CAAiB,UAAjB,CAA4B,IAA5B,CAApB;;AAEA;AACA,cAAU,MAAV,CAAiB,gBAAjB,CAAkC,WAAlC,EAA+C,UAAU,KAAV,EAAiB;AAC5D,kBAAU,WAAV,CAAsB,aAAtB,GAAsC,iBAAiB,UAAU,MAA3B,EAAmC,KAAnC,CAAtC;AACH,KAFD,EAEG,KAFH;;AAIA;AACA,WAAO,gBAAP,CAAwB,OAAxB,EAAiC,UAAU,KAAV,EAAiB;AAC9C,cAAM,cAAN;AACA,YAAI,YAAY,MAAM,KAAN,IAAe,MAAM,OAArC;AACA,YAAI,cAAc,CAAd,IAAmB,cAAc,EAArC,EAAyC;AACrC;AACA,sBAAU,WAAV,CAAsB,eAAtB,GAAwC,CAAC,UAAU,WAAV,CAAsB,eAA/D;AACH,SAHD,MAGO,IAAI,cAAc,eAAd,IAAiC,CAAC,MAAM,QAA5C,EAAsD;AACzD;AACA,sBAAU,MAAV;AACH,SAHM,MAGA,IAAI,cAAc,eAAd,IAAiC,MAAM,QAA3C,EAAqD;AACxD;AACA,sBAAU,MAAV;AACH;AACJ,KAbD;;AAgBA;AACA,WAAO,gBAAP,CAAwB,QAAxB,EAAkC,YAAY;AAC1C;AACA,eAAO,KAAP,GAAe,OAAO,UAAtB;AACA,eAAO,MAAP,GAAgB,OAAO,WAAvB;;AAEA,gBAAQ,GAAR,CAAY,OAAO,KAAP,GAAe,IAAf,GAAsB,OAAO,MAAzC;;AAEA;AACA,eAAO,mBAAP,CAA2B,OAAO,UAAlC,EAA8C,OAAO,WAArD;AACH,KATD;;AAWA;AACA,cAAU,MAAV,CAAiB,IAAI,IAAJ,GAAW,OAAX,EAAjB;AAEH,CA1DD","file":"client-compiled.js","sourcesContent":["\r\n\r\n/**\r\n * Returns a vector of the position of the mouse in\r\n * the given canvas element triggered on an event.\r\n * @param canvas The canvas element to report the\r\n * mouse position in.\r\n * @param event The data from the event containing\r\n * the mouse position.\r\n * @returns {vector} The mouse position.\r\n */\r\nfunction getMousePosition(canvas, event) {\r\n    const boundingRectangle = canvas.getBoundingClientRect();\r\n    return vector.construct(\r\n        (event.clientX - boundingRectangle.left) / (boundingRectangle.right - boundingRectangle.left) * canvas.width,\r\n        (event.clientY - boundingRectangle.top) / (boundingRectangle.bottom - boundingRectangle.top) * canvas.height\r\n    );\r\n}\r\n\r\n// the key code to trigger attachment and detachment (the 'c' key)\r\nconst ATTACH_KEY_CODE = 67;\r\n\r\nwindow.onload = function () {\r\n    // obtain a reference to the canvas\r\n    let canvas = document.getElementById('canvas');\r\n\r\n    // set the width of the canvas to the width of the client's screen\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    console.log(document.body.clientHeight);\r\n\r\n    // create the camera object for the game\r\n    let camera = new Camera(0, 0, canvas.width, canvas.height, world.width, world.height);\r\n\r\n    // create the game logic object to simulate the client-side game\r\n    let gameLogic = new ClientGameLogic(camera);\r\n\r\n    // create a reference to the canvas and reset the dimensions\r\n    gameLogic.canvas = canvas;\r\n\r\n    // create a reference to the rendering context for drawing\r\n    gameLogic.context = gameLogic.canvas.getContext('2d');\r\n\r\n    // add a mouse listener to report mouse position\r\n    gameLogic.canvas.addEventListener('mousemove', function (event) {\r\n        gameLogic.clientState.mousePosition = getMousePosition(gameLogic.canvas, event);\r\n    }, false);\r\n\r\n    // add key-pressed event for movement, attachment, detachment\r\n    window.addEventListener('keyup', function (event) {\r\n        event.preventDefault();\r\n        let character = event.which || event.keyCode;\r\n        if (character === 0 || character === 32) {\r\n            // toggle movement\r\n            gameLogic.clientState.movementEnabled = !gameLogic.clientState.movementEnabled;\r\n        } else if (character === ATTACH_KEY_CODE && !event.shiftKey) {\r\n            // attach to the candidate block\r\n            gameLogic.attach();\r\n        } else if (character === ATTACH_KEY_CODE && event.shiftKey) {\r\n            // detach the most recently added block\r\n            gameLogic.detach();\r\n        }\r\n    });\r\n\r\n\r\n    // add a window-resize listener to update the camera if the window is resized\r\n    window.addEventListener('resize', function () {\r\n        // resize the canvas\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        console.log(canvas.width + ', ' + canvas.height);\r\n\r\n        // notify the camera of this change\r\n        camera.updateConfiguration(window.innerWidth, window.innerHeight);\r\n    });\r\n\r\n    // start the client update loop\r\n    gameLogic.update(new Date().getTime());\r\n\r\n};\r\n"]}